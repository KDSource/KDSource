/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Guide_shielding
*
* %I
* Written by: Osiris Inti Abbate
* Date: Ago 2021
* Origin: Balseiro Institute
*
* Neutron guide that records leakages in a MCPL-format virtual-source file.
*
* %D
* Neutron guide that, while it propagates neutrons in its interior, writes
* state parameters of non-reflected neutrons (leakages) into an mcpl-format
* binary, virtual-source neutron file. The resulting particle list can be
* used, for example, for a shielding calculation outside the guide.
* 
* Guide mirrors parameters can be different for each one, and the guide can be
* curved. Guide curvature, however, is modelling internally, preserving an
* artificial straight geometry in the simulation. Curvature is always towards
* negative x. Use a component rotation of 180 deg. to model curvature towards
* positive x.
*
* Example: Guide_shielding(pt="n",
*                          filename_trans="neutron_leaks.mcpl",
*                          filename_abs="photon_emissions.mcpl",
*                          xwidth=7, yheight=20, length=300)
*
* %VALIDATION
*
* %BUGS
*
* %P
* INPUT PARAMETERS:
* 
* pt:            [str]   Particle type. "n" for neutron (default), "p" for photon.
* filename_trans:[str]   Name of MCPL file to store neutron leaks. If not given, the component name will be used to create one.
* filename_abs:  [str]   Name of MCPL file to store photon emissions in mirror substrate. If not given, absorption in mirrors will not be considered.
* xwidth:        [cm]    Width of the guide (same at entry and exit).
* yheight:       [cm]    Height of the guide (same at entry and exit).
* length:        [cm]    Length of the guide.
* rcurv:         [cm]    Curvature radius of the guide.
* R0:            [1]     Low-angle reflectivity. Overrides values for all mirrors.
* Qc:            [AA-1]  Critical scattering vector. Overrides values for all mirrors.
* alpha:         [AA]    Slope of reflectivity. Overrides values for all mirrors.
* m:             [1]     m-value of material. Zero means completely absorbing. Overrides values for all mirrors.
* W:             [AA-1]  Width of supermirror cut-off. Overrides values for all mirrors.
* R0_1:          [1]     Low-angle reflectivity, for positive x mirror.
* Qc_1:          [AA-1]  Critical scattering vector, for positive x mirror.
* alpha_1:       [AA]    Slope of reflectivity, for positive x mirror.
* m_1:           [1]     m-value of material. Zero means completely absorbing, for positive x mirror.
* W_1 :          [AA-1]  Width of supermirror cut-off, for positive x mirror.
* R0_2:          [1]     Low-angle reflectivity, for positive y mirror.
* Qc_2:          [AA-1]  Critical scattering vector, for positive y mirror.
* alpha_2:       [AA]    Slope of reflectivity, for positive y mirror.
* m_2:           [1]     m-value of material. Zero means completely absorbing, for positive y mirror.
* W_2:           [AA-1]  Width of supermirror cut-off, for positive y mirror.
* R0_3:          [1]     Low-angle reflectivity, for negative x mirror.
* Qc_3:          [AA-1]  Critical scattering vector, for negative x mirror.
* alpha_3:       [AA]    Slope of reflectivity, for negative x mirror.
* m_3:           [1]     m-value of material. Zero means completely absorbing, for negative x mirror.
* W_3:           [AA-1]  Width of supermirror cut-off, for negative x mirror.
* R0_4:          [1]     Low-angle reflectivity, for negative y mirror.
* Qc_4:          [AA-1]  Critical scattering vector, for negative y mirror.
* alpha_4:       [AA]    Slope of reflectivity, for negative y mirror.
* m_4:           [1]     m-value of material. Zero means completely absorbing, for negative y mirror.
* W_4:           [AA-1]  Width of supermirror cut-off, for negative y mirror.
* reflect:       [str]   Reflectivity file name. Format <q(Angs-1) R(0-1)>
*
* %D
*
* %E
*******************************************************************************/

DEFINE COMPONENT Guide_shielding
DEFINITION PARAMETERS ()
SETTING PARAMETERS (string pt="n",
	string filename_trans="", string filename_abs="",
	xwidth=0.0, yheight=0.0, length=0.0, rcurv=0.0, 
	R0=-1, Qc=-1, alpha=-1, m=-1, W=-1, 
	R0_1=0.99, Qc_1=0.0219, alpha_1=4.0, m_1=3.0, W_1=0.003, 
	R0_2=0.99, Qc_2=0.0219, alpha_2=4.0, m_2=3.0, W_2=0.003, 
	R0_3=0.99, Qc_3=0.0219, alpha_3=4.0, m_3=3.0, W_3=0.003, 
	R0_4=0.99, Qc_4=0.0219, alpha_4=4.0, m_4=3.0, W_4=0.003,
	string reflect="")
OUTPUT PARAMETERS (file_trans, file_abs, save_gammas,
	I_trans, p2_trans, N_trans, I_abs, p2_abs, N_abs,
	pTable, par1, par2, par3, par4)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

SHARE
%{
	#include "mcpl.h"
	%include "read_table-lib"
	%include "ref-lib"

	// Absorption probability function
	// Based on paper https://doi.org/10.1016/j.nima.2018.12.069
	void AbsFunc(double q, double v, double* par, double* fa_Ni, double* fa_Ti){
		double R0=par[0], Qc=par[1], m=par[3];
		if(m <= 0 || Qc <=0 || R0 <= 0) {
			*fa_Ni = *fa_Ti = 0;
			return;
		}
		double XSc_Ni=1.21, XSi_Ni=0.474, XSa_Ni=0.410*2200/v;
		double mu = q / Qc;

		if(mu < 1){
			double alpha, lambda = 2*M_PI / (v*V2K);
			if(lambda <= 1) alpha = 1;
			else if(lambda >= 5) alpha = 0;
			else alpha = (5 - lambda) / 4;
			*fa_Ni = (1-R0) * XSa_Ni / (XSa_Ni + alpha*XSa_Ni + XSi_Ni);
			*fa_Ti = 0;
		}
		else if(mu < m+0.1){
			*fa_Ni = 0.005 + 0.005 * (mu - 1);
			*fa_Ti = 0.0045 * (mu - 1);
		}
		else{
			*fa_Ni = (0.0025 * (m+0.1)*(m+0.1)) / mu;
			*fa_Ti = (0.00225 * (m-0.9)*(m+0.1)) / mu;
		}
	}

	void RandomDir(double* direction){
		direction[2] = -1 + 2.*rand()/RAND_MAX;
		double dxy = sqrt(1-direction[2]*direction[2]);
		double phi = 2.*M_PI*rand()/RAND_MAX;
		direction[0] = dxy*cos(phi);
		direction[1] = dxy*sin(phi);
	}

	void SaveGammas(mcpl_outfile_t outfile, mcpl_particle_t* part, int Ng, double* Eg, double* Pg){
		if(part->weight <= 0)
			return;

		double y = (double)rand()/RAND_MAX;
		double buf = Pg[0];
		int i;
		for(i=0; y>buf; i++) buf += Pg[i+1];
		part->ekin = Eg[i];
		RandomDir(part->direction);
		mcpl_add_particle(outfile, part);
	}

	// Emission spectra from https://www-nds.iaea.org/pgaa/databases.html
	// Natural Ni
	int Ng_Ni = 515;
	double Eg_Ni[] = {3.394200e-01,4.649780e-01,5.385600e-01,8.779770e-01,3.108100e-01,7.238100e-01,8.493670e-01,1.188781e+00,4.234640e-01,8.364630e-01,1.301434e+00,8.016780e-01,1.340230e+00,1.679642e+00,5.459180e-01,1.269720e+00,1.395276e+00,1.734687e+00,1.113465e+00,1.226118e+00,1.536920e+00,1.949911e+00,2.075465e+00,2.414872e+00,1.158870e+00,1.213916e+00,1.592124e+00,1.704776e+00,2.015576e+00,2.428563e+00,2.554116e+00,1.836940e+00,2.147740e+00,2.560730e+00,3.025680e+00,1.558600e-01,2.880270e-01,7.666940e-01,1.880143e+00,1.992794e+00,2.303592e+00,2.716578e+00,2.842130e+00,3.181532e+00,2.912380e+00,3.037930e+00,3.377340e+00,1.717740e+00,2.574440e+00,2.987420e+00,3.112970e+00,3.452370e+00,2.662030e+00,3.200570e+00,1.148180e+00,2.685060e+00,3.563000e+00,2.384719e+00,2.497369e+00,2.808164e+00,3.221146e+00,3.346697e+00,3.686096e+00,2.050650e+00,2.541500e+00,3.265270e+00,3.390830e+00,3.730220e+00,8.279600e-01,2.975670e+00,3.388650e+00,3.514200e+00,3.853600e+00,2.178550e+00,2.980200e+00,3.858130e+00,3.011640e+00,3.889570e+00,8.402900e-01,2.287160e+00,3.143850e+00,4.021780e+00,1.114560e+00,2.460620e+00,2.951470e+00,3.262260e+00,3.675240e+00,3.800790e+00,4.140190e+00,7.129200e-01,1.838050e+00,2.518230e+00,3.787890e+00,3.913440e+00,4.252840e+00,3.050920e+00,3.163570e+00,4.352280e+00,8.570400e-01,2.300340e+00,3.526410e+00,4.250170e+00,4.375720e+00,4.715110e+00,3.234050e+00,3.667290e+00,3.779940e+00,4.090730e+00,4.503700e+00,4.629250e+00,1.210760e+00,1.616530e+00,3.334220e+00,3.767460e+00,3.880100e+00,4.190890e+00,4.603860e+00,4.729410e+00,5.068800e+00,1.362770e+00,3.649880e+00,3.704920e+00,4.083120e+00,4.506550e+00,4.919520e+00,5.045060e+00,5.384450e+00,1.595300e+00,2.723580e+00,3.937440e+00,4.428270e+00,5.277570e+00,5.616960e+00,1.379000e+00,1.901630e+00,2.254530e+00,2.450340e+00,2.738350e+00,3.897160e+00,3.952210e+00,4.330400e+00,4.443040e+00,4.753830e+00,5.166790e+00,5.292340e+00,5.631730e+00,4.400740e+00,4.824170e+00,5.237140e+00,5.362690e+00,5.702070e+00,1.864990e+00,4.019870e+00,4.453100e+00,4.565750e+00,5.754430e+00,1.604780e+00,1.816890e+00,2.504720e+00,3.063580e+00,4.222390e+00,5.079040e+00,5.956940e+00,2.616670e+00,3.579130e+00,4.314330e+00,4.805170e+00,5.115950e+00,5.993840e+00,3.136860e+00,4.295670e+00,4.728900e+00,4.841540e+00,5.152320e+00,5.565290e+00,6.030220e+00,1.132530e+00,2.247620e+00,4.421560e+00,4.912390e+00,5.223170e+00,5.636130e+00,2.287750e+00,2.764020e+00,4.406640e+00,4.461680e+00,5.676260e+00,6.141190e+00,8.436200e-01,6.258580e+00,6.597960e+00,1.567960e+00,2.301440e+00,3.411980e+00,3.584010e+00,3.817740e+00,4.244420e+00,5.590400e+00,6.391990e+00,1.728770e+00,2.400740e+00,2.857550e+00,2.897670e+00,2.968520e+00,3.004900e+00,3.041800e+00,3.244320e+00,3.296680e+00,3.367030e+00,3.381800e+00,3.614320e+00,3.929980e+00,4.030140e+00,4.283670e+00,4.646500e+00,4.745940e+00,4.858590e+00,4.977000e+00,5.109200e+00,5.140650e+00,5.145180e+00,5.268550e+00,5.312674e+00,5.435770e+00,5.458800e+00,5.546390e+00,5.621420e+00,5.817219e+00,5.973060e+00,6.105215e+00,6.583831e+00,7.263956e+00,7.697163e+00,8.120567e+00,8.533509e+00,8.998414e+00,6.741200e-02,2.829170e-01,5.886340e-01,6.560450e-01,8.412100e-01,9.086200e-01,8.167250e-01,1.032227e+00,1.099638e+00,1.064989e+00,1.132399e+00,5.292610e-01,9.023900e-01,1.185301e+00,7.012500e-01,1.542450e+00,1.609860e+00,8.210900e-01,1.073660e+00,1.446790e+00,1.662290e+00,1.729700e+00,9.386500e-01,2.123930e+00,2.356740e+00,2.572240e+00,2.639650e+00,1.632620e+00,1.665380e+00,1.856400e+00,2.482080e+00,2.764990e+00,1.133840e+00,1.253690e+00,1.678240e+00,2.580600e+00,2.796100e+00,1.876960e+00,2.406200e+00,2.779310e+00,3.062220e+00,1.021050e+00,1.415290e+00,1.535130e+00,1.959690e+00,2.045350e+00,2.488930e+00,2.862040e+00,3.077537e+00,3.144945e+00,1.502040e+00,1.621880e+00,2.099330e+00,2.575670e+00,3.164280e+00,3.231690e+00,6.501300e-01,2.315500e+00,3.132190e+00,3.347680e+00,3.415090e+00,1.401640e+00,3.242620e+00,3.525520e+00,2.536520e+00,3.012860e+00,3.385970e+00,3.601460e+00,2.802810e+00,3.643970e+00,3.711380e+00,3.082310e+00,3.670910e+00,3.738320e+00,9.130300e-01,2.644140e+00,2.676900e+00,2.867910e+00,3.493590e+00,3.709080e+00,2.684540e+00,2.770200e+00,3.213780e+00,3.869780e+00,6.530000e-01,2.568690e+00,3.895580e+00,4.178480e+00,3.139980e+00,3.956660e+00,4.239560e+00,4.056910e+00,4.712910e+00,3.786300e+00,4.229860e+00,4.602970e+00,4.818450e+00,4.885860e+00,3.353260e+00,3.777800e+00,3.830700e+00,3.863460e+00,4.963020e+00,3.306300e+00,3.903580e+00,4.753000e+00,4.968490e+00,2.248630e+00,4.456030e+00,5.044620e+00,5.112030e+00,2.707740e+00,2.783870e+00,2.856740e+00,2.933910e+00,3.106860e+00,3.580230e+00,3.641310e+00,3.950000e+00,4.043300e+00,4.081460e+00,4.108400e+00,4.150920e+00,4.294260e+00,4.404690e+00,4.588090e+00,4.674830e+00,4.757560e+00,4.956260e+00,5.054780e+00,5.180110e+00,5.695800e+00,6.090000e+00,6.634350e+00,6.720010e+00,7.536637e+00,7.819517e+00,1.172840e+00,8.755900e-01,1.128720e+00,2.301540e+00,1.163340e+00,1.718240e+00,7.222700e-01,7.569000e-01,1.885600e+00,3.058400e+00,8.562000e-01,1.984900e+00,3.157700e+00,2.084380e+00,9.683600e-01,1.221490e+00,2.097060e+00,3.269860e+00,1.068700e+00,1.321800e+00,3.370200e+00,4.599500e-01,1.469970e+00,2.345530e+00,3.518330e+00,2.650500e-01,4.638400e-01,1.186110e+00,1.220730e+00,1.455100e+00,5.794300e-01,1.547780e+00,3.859200e+00,7.027000e-01,2.799700e+00,3.972500e+00,1.761000e+00,4.062400e+00,1.093000e+00,1.849900e+00,6.785000e-01,4.316500e+00,1.045800e+00,4.415900e+00,3.454300e+00,3.828200e+00,5.000900e+00,5.594200e+00,5.876900e+00,5.968000e+00,6.179200e+00,6.443800e+00,6.532700e+00,6.622600e+00,6.735900e+00,6.745900e+00,7.076800e+00,7.325200e+00,7.337900e+00,7.437400e+00,8.293500e+00,8.546600e+00,9.422020e+00,1.059470e+01,8.716900e-02,1.555000e-01,3.623850e-01,4.307150e-01,5.178840e-01,4.833510e-01,8.457330e-01,9.140600e-01,1.001231e+00,8.057960e-01,1.168176e+00,1.236506e+00,1.323673e+00,2.265710e+00,2.352870e+00,1.694700e+00,2.178040e+00,2.540410e+00,2.695910e+00,3.236400e+00,3.127300e+00,3.114300e+00,3.476660e+00,3.221060e+00,3.583420e+00,3.651750e+00,3.738910e+00,3.898930e+00,4.054420e+00,3.794260e+00,4.224950e+00,4.176400e+00,4.331900e+00,4.459000e+00,4.660410e+00,5.022770e+00,4.362410e+00,5.208080e+00,1.474060e+00,1.659390e+00,2.378700e+00,2.525570e+00,3.098780e+00,3.205540e+00,3.554900e+00,3.601300e+00,4.141780e+00,4.484800e+00,5.513950e+00,5.836370e+00,6.319670e+00,6.682010e+00,6.837500e+00,6.338000e-02,2.468300e-01,3.105800e-01,3.820200e-01,6.288500e-01,6.922300e-01,7.256000e-01,1.107600e+00,1.417800e+00,2.083340e+00,2.146720e+00,2.401200e+00,2.648060e+00,3.651900e+00,3.962100e+00,2.819700e+00,3.088600e+00,3.386690e+00,3.773700e+00,3.951400e+00,4.178100e+00,4.680290e+00,5.405810e+00,5.787790e+00,6.034600e+00};
	double Pg_Ni[] = {2.502e-02,1.263e-01,5.094e-04,3.536e-02,2.247e-04,1.274e-04,4.075e-04,8.376e-03,1.528e-03,1.339e-03,7.791e-03,6.593e-05,2.997e-03,5.843e-04,5.229e-04,4.270e-04,7.492e-04,2.577e-03,2.307e-04,1.888e-03,2.907e-03,7.132e-03,3.686e-04,1.813e-03,2.697e-05,3.791e-04,1.948e-04,4.810e-04,1.753e-03,1.154e-03,6.458e-03,7.492e-05,1.783e-03,9.739e-05,1.888e-03,2.247e-04,2.247e-04,4.030e-04,6.443e-04,1.978e-03,6.742e-04,4.045e-04,6.937e-03,1.813e-03,7.941e-05,6.862e-04,2.832e-04,4.045e-05,1.423e-04,5.843e-05,4.944e-05,2.023e-04,4.195e-05,5.454e-04,5.544e-05,1.618e-03,1.049e-03,1.019e-03,1.019e-03,1.259e-03,2.352e-03,9.739e-04,1.693e-03,1.918e-04,9.290e-05,8.855e-04,1.693e-04,4.420e-04,4.495e-05,2.697e-05,1.603e-04,2.577e-04,1.933e-04,3.596e-04,4.944e-05,1.109e-04,2.697e-05,2.577e-04,8.990e-05,4.944e-05,3.191e-04,1.558e-04,2.128e-04,6.293e-05,2.817e-04,1.918e-04,4.210e-03,3.191e-04,1.094e-03,1.948e-04,7.492e-05,1.798e-05,1.783e-04,2.697e-05,3.176e-04,6.593e-05,7.492e-05,2.667e-04,4.944e-05,1.064e-04,6.293e-05,1.873e-04,2.817e-04,1.229e-03,4.944e-05,2.397e-04,1.094e-03,4.944e-05,2.173e-04,8.391e-05,2.247e-05,3.146e-05,3.146e-05,1.423e-04,2.247e-05,4.899e-04,5.394e-05,7.492e-05,4.780e-04,2.397e-04,8.990e-06,2.247e-05,7.042e-05,1.783e-04,1.513e-04,1.333e-04,1.109e-04,2.247e-05,4.944e-05,4.495e-05,1.648e-04,9.290e-05,3.326e-04,2.547e-04,9.739e-05,6.593e-05,5.394e-05,7.492e-05,3.596e-05,1.423e-04,1.348e-05,3.596e-05,2.697e-05,3.146e-05,1.708e-04,7.042e-05,1.348e-05,1.019e-04,1.348e-05,2.023e-04,1.738e-04,5.244e-05,1.244e-04,3.146e-05,4.045e-05,8.391e-05,5.394e-05,2.247e-04,5.843e-05,2.997e-04,1.798e-05,1.064e-04,2.607e-04,9.889e-05,1.348e-05,4.944e-05,2.547e-04,3.146e-05,1.289e-04,1.109e-04,8.391e-05,7.492e-05,5.394e-05,2.098e-04,8.391e-05,2.247e-04,6.593e-05,4.944e-05,8.990e-06,2.247e-05,1.229e-04,4.495e-05,1.798e-04,7.941e-05,1.348e-05,8.990e-06,6.293e-05,2.697e-04,7.492e-05,1.648e-04,4.345e-04,6.293e-05,1.064e-04,4.944e-05,1.798e-05,2.247e-05,4.045e-05,2.247e-05,1.513e-04,3.791e-04,7.941e-04,5.499e-04,5.259e-04,1.289e-03,4.870e-04,6.847e-04,3.311e-04,7.611e-04,1.139e-03,9.889e-04,8.046e-04,1.798e-03,2.173e-03,1.798e-03,5.454e-04,5.319e-04,6.623e-03,1.094e-03,4.884e-04,1.154e-04,5.783e-04,1.468e-03,8.031e-03,2.817e-03,3.551e-04,2.922e-04,5.709e-04,1.633e-02,3.866e-03,1.058e-02,1.244e-02,1.034e-03,5.604e-03,1.993e-02,1.080e-01,2.232e-01,1.304e-03,3.161e-02,1.109e-04,8.750e-04,8.241e-05,2.787e-04,1.513e-03,2.023e-04,1.031e-03,1.453e-04,2.397e-04,1.963e-04,5.394e-05,1.978e-03,2.547e-05,9.290e-05,1.948e-04,4.045e-05,8.840e-05,1.723e-03,8.091e-05,6.742e-05,6.053e-04,5.679e-03,1.573e-05,1.319e-05,1.513e-04,1.259e-04,2.697e-05,1.139e-05,6.143e-05,5.993e-05,2.997e-05,1.948e-05,1.798e-05,3.146e-05,1.319e-05,1.648e-05,1.259e-04,1.229e-05,6.593e-05,3.596e-05,4.645e-05,1.348e-05,7.492e-05,1.903e-04,4.795e-05,2.517e-04,2.547e-05,1.558e-04,2.307e-03,1.558e-04,1.094e-04,4.795e-05,1.798e-04,8.391e-05,3.446e-05,3.296e-05,1.903e-04,2.727e-05,1.828e-04,1.049e-05,5.993e-05,1.408e-05,1.049e-05,1.199e-04,3.446e-04,1.663e-05,1.229e-05,3.251e-05,2.532e-04,2.802e-05,7.042e-06,8.840e-06,1.948e-05,1.348e-04,1.049e-05,1.199e-05,1.348e-05,3.446e-05,1.498e-05,7.492e-06,2.547e-05,1.348e-04,2.247e-05,2.997e-04,1.573e-05,3.446e-06,1.498e-05,5.244e-06,2.083e-04,1.139e-05,2.277e-05,1.229e-05,1.663e-05,7.042e-06,3.251e-05,1.663e-05,6.143e-06,2.113e-05,7.941e-06,7.941e-06,2.892e-05,4.645e-05,6.143e-06,2.547e-05,3.416e-05,6.143e-06,1.049e-05,1.558e-05,4.195e-05,1.094e-04,9.739e-05,6.293e-05,1.214e-04,4.495e-05,4.030e-04,8.241e-05,2.038e-04,1.049e-04,5.394e-05,4.030e-04,4.300e-04,7.192e-05,5.813e-04,4.180e-04,7.492e-04,1.873e-04,1.154e-04,1.438e-04,1.423e-04,6.233e-03,2.802e-05,1.079e-03,2.128e-03,2.847e-02,5.034e-02,1.828e-03,2.592e-04,1.843e-04,2.547e-04,2.173e-04,2.997e-05,1.648e-05,3.896e-05,1.019e-04,1.199e-05,1.363e-05,1.049e-04,4.195e-05,1.274e-04,1.289e-05,1.348e-04,2.547e-04,3.896e-05,8.990e-06,7.492e-06,4.495e-05,8.990e-06,1.049e-05,1.049e-04,7.492e-06,2.397e-06,3.746e-05,5.993e-05,1.139e-04,1.049e-05,1.348e-05,1.229e-05,3.896e-05,4.495e-06,4.495e-05,3.296e-04,2.397e-05,2.247e-05,2.247e-05,1.588e-04,1.363e-05,5.993e-06,9.140e-05,1.049e-05,8.990e-06,1.348e-05,1.049e-05,9.889e-04,7.492e-06,1.798e-05,2.397e-05,2.997e-05,4.495e-05,4.195e-05,2.997e-05,3.146e-05,8.990e-05,1.199e-04,3.446e-05,4.944e-05,1.948e-05,1.199e-04,3.671e-04,1.708e-04,6.353e-04,9.979e-03,5.124e-03,5.544e-05,4.944e-04,2.337e-03,2.757e-03,7.941e-05,1.468e-04,4.495e-05,7.911e-04,2.922e-04,3.626e-04,1.798e-04,2.577e-04,1.798e-05,3.746e-05,2.997e-04,1.333e-04,7.492e-06,3.146e-05,3.146e-05,1.214e-04,2.188e-05,1.064e-04,8.690e-05,8.690e-05,2.397e-05,4.944e-05,1.049e-05,8.990e-06,7.492e-06,2.397e-05,3.146e-05,8.990e-06,1.229e-05,1.304e-05,8.091e-06,4.570e-05,4.944e-05,9.589e-05,3.746e-05,3.986e-04,2.083e-04,6.443e-05,3.146e-05,4.105e-04,2.907e-04,1.319e-03,5.214e-03,3.536e-03,1.184e-03,6.862e-02,5.094e-04,1.498e-05,8.421e-04,2.098e-05,1.948e-04,4.345e-05,6.143e-06,1.109e-04,6.143e-06,1.798e-05,1.948e-05,1.798e-05,6.742e-06,2.397e-06,2.397e-06,5.843e-06,7.941e-06,2.547e-05,9.889e-06,3.446e-05,3.746e-06,1.169e-04,2.697e-04,5.394e-04,1.948e-03};
	double gpa_Ni = 1.520315; // Number of gammas per absorption
	// Natural Ti	
	int Ng_Ti = 394;
	double Eg_Ti[] = {1.593760e-01,1.390330e+00,1.549700e+00,2.433000e-01,1.633600e+00,1.793000e+00,1.819300e+00,2.163000e+00,2.554200e+00,2.442500e-01,1.357200e+00,3.176500e+00,2.000400e+00,3.676200e+00,3.923000e+00,4.957000e+00,5.203900e+00,5.330000e+00,5.703600e+00,6.081600e+00,6.325800e+00,7.086900e+00,7.330200e+00,9.835170e-01,1.312092e+00,1.437493e+00,2.420978e+00,2.013640e+00,8.028890e-01,9.282910e-01,2.240356e+00,9.441040e-01,1.037600e+00,1.063163e+00,2.375224e+00,2.387259e+00,3.370724e+00,1.195753e+00,2.633207e+00,3.616666e+00,2.715770e+00,3.699220e+00,2.754890e+00,3.738350e+00,4.236310e-01,1.486784e+00,2.819180e+00,1.556570e+00,2.868620e+00,8.111850e-01,1.614060e+00,8.347340e-01,3.090861e+00,4.074310e+00,4.583400e-01,9.729020e-01,4.196656e+00,4.205000e+00,2.092002e+00,3.404033e+00,8.406240e-01,1.086580e+00,1.233487e+00,2.036354e+00,2.161753e+00,3.473782e+00,1.221860e+00,2.284990e+00,3.597020e+00,1.479342e+00,1.495154e+00,1.140920e+00,3.774060e+00,2.487610e+00,3.799630e+00,1.092870e+00,2.371160e+00,3.808580e+00,2.498490e+00,4.793940e+00,1.293750e+00,1.539700e+00,1.686610e+00,2.489470e+00,4.910310e+00,1.700910e+00,2.629170e+00,2.644290e+00,3.956310e+00,1.906010e+00,1.921820e+00,2.724680e+00,2.850070e+00,1.933720e+00,1.159390e+00,4.372520e+00,1.791340e+00,3.069610e+00,2.395580e+00,3.198420e+00,1.182539e+00,4.656229e+00,5.639643e+00,2.085710e+00,2.517640e+00,3.467380e+00,4.904760e+00,1.967920e+00,5.058650e+00,3.633350e+00,5.070730e+00,2.907200e+00,2.980390e+00,1.572870e+00,4.069340e+00,2.553860e+00,2.687570e+00,3.250580e+00,5.506590e+00,5.557750e+00,2.887880e+00,3.483640e+00,4.411860e+00,3.572810e+00,2.108170e+00,5.843430e+00,3.900960e+00,5.914420e+00,3.104750e+00,4.535820e+00,1.620040e+00,2.941100e+00,3.361030e+00,3.620320e+00,4.134850e+00,4.937660e+00,6.374990e+00,3.344590e+00,4.182560e+00,4.301610e+00,4.317420e+00,3.186280e+00,2.858300e+00,3.763740e+00,3.877460e+00,3.916590e+00,4.010340e+00,4.052390e+00,4.084900e+00,4.267480e+00,4.565890e+00,4.650090e+00,4.669320e+00,4.728070e+00,4.799060e+00,4.829500e+00,4.918670e+00,4.999900e+00,5.084740e+00,5.135910e+00,5.220180e+00,5.261180e+00,5.312600e+00,5.385800e+00,5.571770e+00,5.583850e+00,5.737730e+00,5.986257e+00,6.006670e+00,6.135480e+00,6.269960e+00,6.468490e+00,6.480380e+00,6.686150e+00,6.701270e+00,6.715570e+00,6.831940e+00,6.833870e+00,6.842810e+00,6.907004e+00,7.045410e+00,7.168639e+00,7.238381e+00,7.420800e+00,7.429187e+00,7.590880e+00,7.773740e+00,7.843522e+00,7.887450e+00,7.926580e+00,8.009128e+00,8.255040e+00,8.267078e+00,8.386118e+00,8.401928e+00,9.204666e+00,9.330045e+00,1.064186e+01,1.381745e+00,1.585941e+00,1.622620e+00,1.375040e-01,3.417060e-01,1.761974e+00,6.384100e-01,8.792900e-01,1.122630e+00,2.513350e+00,9.023500e-01,1.041710e+00,4.602700e-01,1.135360e+00,1.315190e+00,1.451782e+00,1.589282e+00,1.793476e+00,1.498663e+00,1.674696e+00,1.878891e+00,1.666210e+00,1.842243e+00,2.046436e+00,1.883010e+00,1.494400e-01,2.405820e+00,1.350520e+00,2.131430e+00,2.473120e+00,6.051000e-01,4.341200e-01,2.498236e+00,2.635733e+00,2.839923e+00,3.027000e+00,2.709680e+00,2.847180e+00,1.327550e+00,1.549560e+00,3.002200e+00,3.206390e+00,1.405920e+00,2.943070e+00,3.284760e+00,2.306450e+00,3.224840e+00,3.187330e+00,3.324830e+00,1.646500e+00,1.854813e+00,1.940227e+00,2.602050e+00,2.611060e+00,3.529441e+00,3.733627e+00,1.076900e+00,1.532560e+00,2.429640e+00,3.388910e+00,3.427440e+00,3.564930e+00,2.836100e+00,3.923400e+00,3.051250e+00,4.030090e+00,3.074130e+00,3.534370e+00,4.071920e+00,2.346720e+00,2.730230e+00,2.836900e+00,2.991210e+00,3.026704e+00,3.231320e+00,3.331310e+00,3.475580e+00,3.553940e+00,3.708970e+00,3.733300e+00,3.920404e+00,4.287200e+00,4.354490e+00,4.673090e+00,4.713859e+00,4.881394e+00,4.966802e+00,5.477650e+00,5.637590e+00,6.418426e+00,6.555911e+00,6.760084e+00,1.553786e+00,1.121130e+00,5.237590e-01,2.308970e+00,1.472255e+00,1.497036e+00,2.618130e+00,2.755960e+00,4.309660e+00,1.735040e+00,2.856130e+00,2.932790e+00,4.486470e+00,3.236050e+00,4.789730e+00,7.334850e-01,1.681977e+00,2.205717e+00,2.511114e+00,3.632184e+00,1.207926e+00,2.704923e+00,3.825988e+00,2.349050e+00,2.872780e+00,3.993840e+00,3.019830e+00,3.131600e+00,7.603560e-01,1.156510e+00,3.271429e+00,1.242410e+00,1.636430e+00,2.924340e+00,3.448070e+00,4.602450e+00,2.129750e+00,4.747760e+00,3.181050e+00,3.724740e+00,4.845780e+00,1.731430e+00,2.658520e+00,3.846320e+00,1.524410e+00,2.300480e+00,2.538480e+00,5.156471e+00,2.866940e+00,4.054730e+00,1.457680e+00,5.283550e+00,2.701770e+00,3.650220e+00,2.719300e+00,4.403750e+00,5.524770e+00,1.852040e+00,5.677870e+00,5.928740e+00,3.456140e+00,3.707020e+00,3.860130e+00,3.909800e+00,4.089940e+00,4.101360e+00,4.209150e+00,4.228441e+00,4.417560e+00,4.539130e+00,4.559100e+00,4.637160e+00,4.782470e+00,4.815800e+00,4.992434e+00,5.132260e+00,5.244020e+00,5.391060e+00,5.558913e+00,5.752708e+00,6.058082e+00,6.148820e+00,6.452060e+00,6.528710e+00,6.766695e+00,6.791472e+00,8.263513e+00,9.384444e+00,1.166600e+00,1.567500e+00,6.307000e-01,1.031300e+00,2.198900e+00,7.078000e-01,1.738900e+00,2.904200e+00,9.757000e-01,2.007000e+00,3.174500e+00,3.197300e+00,3.466600e+00,4.173600e+00,5.205800e+00,6.373100e+00};
	double Pg_Ti[] = {5.321e-04,4.434e-04,1.537e-04,6.503e-05,1.241e-04,1.478e-04,5.143e-05,4.434e-06,2.128e-04,9.932e-05,7.094e-06,1.123e-05,5.321e-05,1.596e-05,5.321e-05,8.276e-05,3.488e-04,4.966e-05,1.596e-05,7.685e-05,8.868e-05,3.429e-04,4.611e-04,6.739e-03,2.264e-03,1.549e-03,8.513e-05,1.626e-05,2.258e-05,1.584e-04,4.966e-04,5.427e-04,6.326e-05,4.966e-05,4.848e-04,1.915e-04,1.774e-04,5.321e-05,6.503e-04,7.094e-06,5.912e-05,4.138e-05,2.365e-05,4.138e-05,1.768e-04,7.390e-05,5.143e-05,5.616e-05,2.306e-04,8.809e-05,1.992e-04,8.513e-05,1.253e-04,2.010e-05,1.478e-05,5.439e-05,3.429e-05,7.094e-06,1.543e-04,1.803e-04,4.197e-05,2.601e-05,1.372e-05,4.375e-04,5.734e-04,2.956e-04,2.187e-05,2.424e-05,2.838e-05,1.082e-04,4.966e-05,4.611e-05,8.868e-06,1.951e-05,3.902e-05,7.331e-06,6.266e-05,7.685e-05,5.675e-05,8.276e-06,3.488e-05,1.774e-05,2.365e-05,2.069e-05,4.729e-06,1.419e-05,2.542e-05,1.596e-05,2.424e-05,3.547e-05,6.799e-05,1.478e-05,5.853e-05,4.316e-05,1.537e-05,2.365e-05,1.064e-05,1.537e-05,2.660e-05,2.601e-05,3.370e-05,1.182e-05,2.956e-05,6.385e-05,3.074e-05,6.089e-05,2.128e-05,5.794e-05,3.015e-05,1.655e-05,8.809e-06,1.478e-05,1.596e-05,1.182e-05,4.729e-05,2.424e-05,3.429e-05,5.321e-06,1.123e-05,3.133e-05,1.537e-05,1.478e-05,1.419e-05,6.503e-06,3.488e-05,7.035e-06,5.321e-06,3.843e-06,1.182e-05,6.089e-06,2.542e-05,2.956e-05,2.246e-05,2.187e-05,2.601e-05,1.892e-05,1.301e-05,6.089e-05,2.246e-06,8.276e-06,7.685e-06,2.187e-05,2.187e-05,1.182e-05,2.187e-05,8.868e-06,4.079e-05,1.182e-05,3.370e-05,9.341e-05,2.010e-05,7.390e-06,6.503e-06,1.833e-05,1.478e-05,1.419e-05,1.182e-05,2.660e-05,4.434e-05,4.966e-05,3.311e-05,1.892e-05,5.084e-05,7.685e-06,1.182e-05,2.572e-04,1.117e-04,1.756e-04,6.385e-05,2.542e-05,4.729e-05,6.562e-05,2.849e-04,1.478e-05,2.424e-05,5.380e-05,5.734e-05,1.419e-04,2.483e-05,9.459e-05,3.429e-05,1.194e-03,2.524e-04,7.685e-06,5.912e-05,2.323e-04,8.631e-05,1.732e-04,5.616e-06,8.336e-06,4.073e-04,3.098e-05,2.187e-05,8.513e-05,2.542e-05,4.528e-04,2.075e-05,1.194e-04,3.062e-01,3.689e-02,2.483e-04,3.204e-03,1.088e-01,1.839e-02,2.069e-04,1.360e-04,2.808e-03,7.863e-04,4.316e-04,2.542e-04,6.503e-05,7.035e-04,1.241e-04,8.454e-04,3.098e-03,9.045e-03,1.756e-02,1.549e-03,2.306e-04,2.424e-04,2.578e-03,1.573e-03,2.382e-03,1.478e-04,1.046e-03,2.246e-04,1.596e-04,2.542e-04,1.064e-04,6.030e-05,1.366e-03,4.434e-04,2.583e-03,7.685e-03,5.675e-04,3.902e-04,9.932e-04,4.789e-04,8.868e-04,3.133e-04,1.951e-04,3.630e-03,5.557e-04,1.537e-04,6.917e-04,5.853e-04,2.187e-04,2.424e-04,1.301e-04,6.739e-04,9.459e-05,1.111e-03,6.207e-04,5.161e-03,1.537e-04,1.892e-04,1.241e-04,7.094e-05,1.241e-04,2.246e-04,3.251e-03,7.685e-03,9.873e-04,2.246e-04,7.094e-04,1.655e-03,1.655e-04,4.611e-04,6.444e-04,3.251e-03,7.922e-04,8.572e-03,1.531e-03,1.951e-04,6.030e-03,2.719e-03,2.181e-03,2.542e-03,4.960e-03,5.202e-04,1.431e-03,2.223e-03,3.908e-03,1.821e-02,1.159e-02,7.981e-04,1.513e-03,1.159e-01,1.975e-02,1.756e-01,5.717e-03,3.724e-03,1.336e-04,5.321e-05,6.976e-04,5.912e-04,1.218e-03,8.158e-05,1.596e-05,4.493e-05,1.756e-04,4.079e-05,6.503e-06,7.390e-05,8.276e-06,1.318e-05,5.202e-05,6.385e-04,2.643e-04,1.058e-04,1.478e-04,2.719e-04,3.429e-05,2.246e-05,8.099e-05,6.621e-05,4.907e-05,2.424e-05,2.069e-05,1.241e-05,2.341e-04,4.375e-05,3.724e-05,1.360e-05,8.868e-06,1.230e-05,1.892e-05,1.253e-04,8.276e-06,8.276e-06,1.236e-05,1.478e-05,3.074e-05,6.621e-05,4.316e-05,4.197e-05,6.739e-05,5.261e-05,2.719e-05,3.192e-05,7.508e-06,2.252e-05,1.005e-05,6.503e-06,2.306e-05,8.868e-06,7.744e-06,3.370e-05,1.017e-05,2.601e-05,6.326e-05,3.547e-05,1.241e-05,8.868e-06,4.848e-05,5.202e-05,6.148e-05,2.471e-04,1.135e-04,1.833e-05,3.311e-05,1.129e-04,8.631e-06,6.621e-05,2.767e-04,1.236e-05,3.370e-05,1.206e-04,3.789e-04,2.909e-04,6.207e-04,3.251e-05,1.537e-05,5.675e-05,1.100e-03,4.670e-04,5.279e-04,3.133e-04,2.306e-04,2.956e-05,2.956e-05,1.774e-05,9.459e-05,3.547e-05,5.321e-05,2.956e-05,5.912e-06,4.729e-06,4.729e-05,5.321e-05,1.596e-04,1.182e-04,1.951e-04,2.365e-05};
	double gpa_Ti = 2.78215; // Number of gammas per absorption
%}

DECLARE
%{
	mcpl_outfile_t file_trans, file_abs;
	int save_gammas;
	double I_trans, p2_trans, I_abs, p2_abs;
	int N_trans, N_abs;
	mcpl_particle_t *part_trans, *part_abs;

	double par1[5], par2[5], par3[5], par4[5];

	t_Table pTable; // Tabla de reflectividad
%}

INITIALIZE
%{
	if(strlen(filename_trans) == 0) strcat(strcpy(filename_trans, NAME_CURRENT_COMP), "_trans");
	file_trans = mcpl_create_outfile(filename_trans);
	mcpl_hdr_set_srcname(file_trans,"McStas Guide_shielding");
	mcpl_enable_universal_pdgcode(file_trans, pt2pdg(pt[0]));
	part_trans = mcpl_get_empty_particle(file_trans);

	save_gammas = strlen(filename_abs);
	if(save_gammas){
		file_abs = mcpl_create_outfile(filename_abs);
		mcpl_hdr_set_srcname(file_abs,"McStas Guide_shielding");
		mcpl_enable_universal_pdgcode(file_abs, pt2pdg('p'));
		part_abs = mcpl_get_empty_particle(file_abs);
	}

	I_trans = p2_trans = N_trans = 0;
	I_abs = p2_abs = N_abs = 0;

	if(!rcurv || rcurv==INFINITY) rcurv = 0;

	// Mirrors with same properties
	if(R0 >= 0){R0_1=R0; R0_2=R0; R0_3=R0; R0_4=R0;}
	if(Qc >= 0){Qc_1=Qc; Qc_2=Qc; Qc_3=Qc; Qc_4=Qc;}
	if(alpha >= 0){alpha_1=alpha; alpha_2=alpha; alpha_3=alpha; alpha_4=alpha;}
	if(m >= 0){m_1=m; m_2=m; m_3=m; m_4=m;}
	if(W >= 0){W_1=W; W_2=W; W_3=W; W_4=W;}

	par1[0]=R0_1; par1[1]=Qc_1; par1[2]=alpha_1; par1[3]=m_1; par1[4]=W_1;
	par2[0]=R0_2; par2[1]=Qc_2; par2[2]=alpha_2; par2[3]=m_2; par2[4]=W_2;
	par3[0]=R0_3; par3[1]=Qc_3; par3[2]=alpha_3; par3[3]=m_3; par3[4]=W_3;
	par4[0]=R0_4; par4[1]=Qc_4; par4[2]=alpha_4; par4[3]=m_4; par4[4]=W_4;
%}

TRACE
%{
	double t1, t2;                                          /* Intersection times. */
	int im;                                                 /* Which mirror hit? */
	double q;                                               /* Q [1/AA] of reflection */
	double R;                                               /* Reflectivity */
	double fa_Ni, fa_Ti;                                    /* Probabilities of absorption */
	// Uppercase variables represent absolute variables, modelling the guide as curved
	// Lowercase variables represent variables modified to straighten the guide
	double a, b, c, X, Y, Z, VX, VY, VZ;
	double* par;
	
	PROP_Z0; /* Propagate neutron to guide entrance. */
	SCATTER; /* Scatter here to ensure that fully transmitted neutrons will not be absorbed in a GROUP construction, e.g. all neutrons - even the later absorbed ones are scattered at the guide entry. */
	if(x <= -xwidth/2. || x >= xwidth/2. || y <= -yheight/2. || y >= yheight/2.) ABSORB;

	while(1){
		
		// Determine absolute position and velocity
		if(rcurv == 0){
			X = x; Y = y; Z = z;
			VX = vx; VY = vy; VZ = vz;
		}
		else{
			X = (rcurv+x)*cos(z/rcurv)-rcurv; Y = y; Z = (rcurv+x)*sin(z/rcurv);
			VX = vx*cos(z/rcurv)-vz*sin(z/rcurv); VY = vy; VZ = vx*sin(z/rcurv)+vz*cos(z/rcurv);
		}

		// Determine intersection time and which mirror hit
		if(rcurv == 0) t1 = (length - Z)/VZ;
		else t1 = ((rcurv+X)*tan(length/rcurv)-Z)/(VZ-VX*tan(length/rcurv));
		im = -1;
		if(rcurv == 0){
			if(vx > 0 && (t2 = (xwidth/2.-x)/vx) < t1){t1 = t2; im = 0;}     // Positive x mirror
			if(vy > 0 && (t2 = (yheight/2.-y)/vy) < t1){t1 = t2; im = 1;}    // Positive y mirror
			if(vx < 0 && (t2 = (x+xwidth/2.)/(-vx)) < t1){t1 = t2; im = 2;}  // Negative x mirror
			if(vy < 0 && (t2 = (y+yheight/2.)/(-vy)) < t1){t1 = t2; im = 3;} // Negative y mirror
		}
		else{
			a = VX*VX+VZ*VZ; b = 2*((X+rcurv)*VX+Z*VZ); c = (X+rcurv)*(X+rcurv)+Z*Z-(rcurv+xwidth/2)*(rcurv+xwidth/2);
			if(b*b-4*a*c > 0 && ((t2 = (-b+sqrt(b*b-4*a*c))/(2*a)) < t1) && (t2 > 0)){ t1 = t2; im = 0; } // Positive x mirror
			if(VY > 0 && (t2 = (yheight/2 - Y)/VY) < t1){ t1 = t2; im = 1; } // Positive y mirror
			a = VX*VX+VZ*VZ; b = 2*((X+rcurv)*VX+Z*VZ); c = (X+rcurv)*(X+rcurv)+Z*Z-(rcurv-xwidth/2)*(rcurv-xwidth/2);
			if(b*b-4*a*c > 0 && ((t2 = (-b-sqrt(b*b-4*a*c))/(2*a)) < t1) && (t2 > 0)){ t1 = t2; im = 2; } // Negative x mirror
			if(VY < 0 && (t2 = (Y + yheight/2)/(-VY)) < t1){ t1 = t2; im = 3; } // Negative y mirror
		}

		// Propagate until intersection
		if(rcurv == 0) PROP_DT(t1);
		else{
			x = sqrt((rcurv+X+VX*t1)*(rcurv+X+VX*t1) + (Z+VZ*t1)*(Z+VZ*t1)) - rcurv;
			y = Y + VY*t1;
			z = rcurv * atan2(Z+VZ*t1, rcurv+X+VX*t1);
			vx = VX*cos(z/rcurv) + VZ*sin(z/rcurv);
			vy = VY;
			vz = -VX*sin(z/rcurv) + VZ*cos(z/rcurv);
		}
		if(im == -1) break;                    /* Neutron left guide. */

		// Determine new absolute position and velocity
		if(rcurv == 0){
			X = x; Y = y; Z = z;
			VX = vx; VY = vy; VZ = vz;
		}
		else{
			X = (rcurv+x)*cos(z/rcurv)-rcurv; Y = y; Z = (rcurv+x)*sin(z/rcurv);
			VX = vx*cos(z/rcurv)-vz*sin(z/rcurv); VY = vy; VZ = vx*sin(z/rcurv)+vz*cos(z/rcurv);
		}

		// Record neutron parameters before reflection
		double V2 = (VX*VX + VY*VY + VZ*VZ);
		double E = 1e-9 * VS2E * V2;
		double V = sqrt(V2);
		part_trans->ekin = E;
		part_trans->position[0] = X*100.0; part_trans->position[1] = Y*100.0; part_trans->position[2] = Z*100.0;
		if(save_gammas){
			part_abs->position[0] = X*100.0; part_abs->position[1] = Y*100.0; part_abs->position[2] = Z*100.0;
		}
		part_trans->direction[0] = VX/V; part_trans->direction[1] = VY/V; part_trans->direction[2] = VZ/V;

		// Reflect in im mirror
		switch(im){
			case 0:                   // Positive x mirror
				q = V2Q*2*vx;
				R = 1.0;
				if(reflect && strlen(reflect) && strcmp(reflect,"NULL") && strcmp(reflect,"0")) TableReflecFunc(q, &pTable, &R);
				else{par = par1; StdReflecFunc(q, par, &R);}
				vx = -vx;
				break;
			case 1:                   // Positive y mirror
				q = V2Q*2*vy;
				R = 1.0;
				if(reflect && strlen(reflect) && strcmp(reflect,"NULL") && strcmp(reflect,"0")) TableReflecFunc(q, &pTable, &R);
				else{par = par2; StdReflecFunc(q, par, &R);}
				vy = -vy;
				break;
			case 2:                   // Negative x mirror
				q = V2Q*2*(-vx);
				R = 1.0;
				if(reflect && strlen(reflect) && strcmp(reflect,"NULL") && strcmp(reflect,"0")) TableReflecFunc(q, &pTable, &R);
				else{par = par3; StdReflecFunc(q, par, &R);}
				vx = -vx;
				break;
			case 3:                   // Negative y mirror
				q = V2Q*2*(-vy);
				R = 1.0;
				if(reflect && strlen(reflect) && strcmp(reflect,"NULL") && strcmp(reflect,"0")) TableReflecFunc(q, &pTable, &R);
				else{par = par4; StdReflecFunc(q, par, &R);}
				vy = -vy;
				break;
		}

		// Record gamma productions
		if(save_gammas){
			AbsFunc(q, V, par, &fa_Ni, &fa_Ti);
			part_abs->weight = p * fa_Ni * gpa_Ni;
			if((float)part_abs->weight > 0){
				SaveGammas(file_abs, part_abs, Ng_Ni, Eg_Ni, Pg_Ni);
				I_abs += part_abs->weight;
				p2_abs += part_abs->weight*part_abs->weight;
				N_abs++;
			}
			part_abs->weight = p * fa_Ti * gpa_Ti;
			if((float)part_abs->weight > 0){
				SaveGammas(file_abs, part_abs, Ng_Ti, Eg_Ti, Pg_Ti);
				I_abs += part_abs->weight;
				p2_abs += part_abs->weight*part_abs->weight;
				N_abs++;
			}
		}
		else fa_Ni = fa_Ti = 0;

		// Record non reflected statistic weight and save
		part_trans->weight = p*(1-R-fa_Ni-fa_Ti);
		if((float)part_trans->weight > 0){
			double dir2 = part_trans->direction[0]*part_trans->direction[0]+part_trans->direction[1]*part_trans->direction[1]+part_trans->direction[2]*part_trans->direction[2];
			if(dir2 != 1){
				double dir = sqrt(dir2);
					part_trans->direction[0] /= dir;
					part_trans->direction[1] /= dir;
					part_trans->direction[2] /= dir;
			}
			mcpl_add_particle(file_trans, part_trans);
			I_trans += part_trans->weight;
			p2_trans += part_trans->weight*part_trans->weight;
			N_trans++;
		}

		// Update reflected weight
		if(R==0) ABSORB;
		p *= R;
		SCATTER;
	}
%}

SAVE
%{
	fprintf(stderr, "Guide_tracks %s:\n", NAME_CURRENT_COMP);
	fprintf(stderr, "\tTransmisions: I err N %lf %lf %d\n", I_trans, sqrt(p2_trans), N_trans);
	if(save_gammas) fprintf(stderr, "\tAbsorptions: I err N %lf %lf %d\n", I_abs, sqrt(p2_abs), N_abs);
	else fprintf(stderr, "\tAbsorptions: Not considered\n");
%}

FINALLY
%{
	mcpl_closeandgzip_outfile(file_trans);
	if(save_gammas) mcpl_closeandgzip_outfile(file_abs);
%}

MCDISPLAY
%{
	multiline(5,
		-xwidth/2.0, -yheight/2.0, 0.0,
		 xwidth/2.0, -yheight/2.0, 0.0,
		 xwidth/2.0,  yheight/2.0, 0.0,
		-xwidth/2.0,  yheight/2.0, 0.0,
		-xwidth/2.0, -yheight/2.0, 0.0);
	multiline(5,
		-xwidth/2.0, -yheight/2.0, (double)length,
		 xwidth/2.0, -yheight/2.0, (double)length,
		 xwidth/2.0,  yheight/2.0, (double)length,
		-xwidth/2.0,  yheight/2.0, (double)length,
		-xwidth/2.0, -yheight/2.0, (double)length);
	line(-xwidth/2.0, -yheight/2.0, 0, -xwidth/2.0, -yheight/2.0, (double)length);
	line( xwidth/2.0, -yheight/2.0, 0,  xwidth/2.0, -yheight/2.0, (double)length);
	line( xwidth/2.0,  yheight/2.0, 0,  xwidth/2.0,  yheight/2.0, (double)length);
	line(-xwidth/2.0,  yheight/2.0, 0, -xwidth/2.0,  yheight/2.0, (double)length);
%}

END
