/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: KDSource
*
* %I
* Written by: Osiris Inti Abbate
* Date: Ago 2021
* Origin: Balseiro Institute
*
* Distributional source, based on a MCPL-format particle list, on which
* the Kernel Density Estimation (KDE) method is applied.
*
* %D
* Distributional source, based on a MCPL-format particle list, on which
* the Kernel Density Estimation (KDE) method is applied.
* 
* It allows sampling more particles than the number present in a virtual,
* previously generated virtual source, without repeating samples.
* 
* It requires a XML parameters file containing the needed configurations
* for an optimized KDE source, which can be generated with the KDSource
* package.
*
* Example: KDSource("optimized_source.xml")
*
* %VALIDATION
*
* %BUGS
*
* %P
* INPUT PARAMETERS:
* 
* sourcefile [str]  Name of the XML parameters file containing KDSource definition.
* use_kde    [0/1]  Whether to use KDE or just sample particles from the MCPL file. Default: 1
* loop       [0/1]  Whether to loop over the file when reaching its end. Default: 1
*
* %D
* Example values:
*
* %E
*******************************************************************************/

DEFINE COMPONENT KDSource
DEFINITION PARAMETERS ()
SETTING PARAMETERS (string sourcefile, use_kde=1, loop=1)
OUTPUT PARAMETERS (I, p2, N)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 

SHARE
%{
	#include "mcpl.h"
	#include "kdsource.h"
%}

DECLARE
%{
	int N;
	double I;
	double p2;
	
	KDSource *kdsource;
	double w_crit;
%}

INITIALIZE
%{  
	kdsource = KDS_open(sourcefile);
	w_crit = use_kde ? KDS_w_mean(kdsource, 1000, NULL): -1;
%}

TRACE
%{
	char pt;
	mcpl_particle_t part;
	double w, v;
	int eof_reached;

	eof_reached = KDS_sample2(kdsource, &part, use_kde, w_crit, NULL, 1);

	if(eof_reached && !loop){
	    fprintf(stderr, "End of particle list reached. Finishing simulation\n");
	    mcset_ncount(mcget_run_num()); ABSORB;
	}

	x = part.position[0]/100;
	y = part.position[1]/100;
	z = part.position[2]/100;
	v = SE2V*sqrt(part.ekin*1E9);
	vx = v*part.direction[0];
	vy = v*part.direction[1];
	vz = v*part.direction[2];
	sx = 0;
	sy = 0;
	sz = 0;
	t = 0;
	p = part.weight;

	I += part.weight;
	p2 += part.weight*part.weight;
	N++;

	SCATTER;

%}

SAVE
%{
	fprintf(stderr, "KDSource %s: I err N %lf %lf %d\n", NAME_CURRENT_COMP, I, sqrt(p2), N);
%}

FINALLY
%{
	KDS_destroy(kdsource);
%}

MCDISPLAY
%{
	multiline(5,
		-1.0, -1.0, 0.0,
		 1.0, -1.0, 0.0,
		 1.0,  1.0, 0.0,
		-1.0,  1.0, 0.0,
		-1.0, -1.0, 0.0);
%}

END
